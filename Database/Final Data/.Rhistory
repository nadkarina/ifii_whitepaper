if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("glmnet", "abcrf", "tidyverse", "haven", "grf", "randomForest", "dplyr", "tidyr", "randomForestExplainer", "caret", "e1071", "ranger", "parallel", "doParallel", "rattle", "purrr", "xtable", "rsample")
##############################
######READ IN THE DATASET#####
##############################
#Change working directory to where the data file is saved
setwd("/Users/theys/Documents/GitHub/ifii_whitepaper/Database/Final Data/")
#read in data file
raw_fii_dataset <- read_dta("fii-clean-randomforestprofiles.dta")
#######################
####PREP THE DATA#####
#######################
#Make sure all variables are correctly identified as factors
raw_fii_dataset[sapply(raw_fii_dataset, is.numeric)] <- lapply(raw_fii_dataset[sapply(raw_fii_dataset, is.numeric)], as.factor)
#Remove Uncessary Vars
clean_fii_dataset <- select(raw_fii_dataset, -c(everuse, use_6mon_atm_bin, weight))
# Subset by Gender
clean_fii_dataset_f <- subset(clean_fii_dataset, female == "1")
clean_fii_dataset_m <- subset(clean_fii_dataset, female == "0")
# Make into Data Frame
clean_fii_dataset=data.frame(clean_fii_dataset)
clean_fii_dataset_f=data.frame(clean_fii_dataset_f)
clean_fii_dataset_m=data.frame(clean_fii_dataset_m)
# Split in Training and Test
set.seed(8452)
split_frame = createDataPartition(clean_fii_dataset$ownership, p = 0.8, list = FALSE)
clean_fii_dataset_train = clean_fii_dataset[split_frame, ]
clean_fii_dataset_test = clean_fii_dataset[-split_frame, ]
split_frame_f = createDataPartition(clean_fii_dataset_f$ownership, p = 0.8, list = FALSE)
clean_fii_dataset_f_train = clean_fii_dataset_f[split_frame_f, ]
clean_fii_dataset_f_test = clean_fii_dataset_f[-split_frame_f, ]
split_frame_m = createDataPartition(clean_fii_dataset_m$ownership, p = 0.8, list = FALSE)
clean_fii_dataset_m_train = clean_fii_dataset_m[split_frame_m, ]
clean_fii_dataset_m_test = clean_fii_dataset_m[-split_frame_m, ]
# Make into matrices
matrix_train <- select(clean_fii_dataset_train, -ownership)
matrix_train <- data.matrix(matrix_train)
matrix_train_f <- select(clean_fii_dataset_f_train, -ownership)
matrix_train_f <- data.matrix(matrix_train_f)
matrix_train_m <- select(clean_fii_dataset_m_train, -ownership)
matrix_train_m <- data.matrix(matrix_train_m)
#clean outcome var
matrix_train_outcome <- clean_fii_dataset_train$ownership
matrix_train_outcome <- data.matrix(matrix_train_outcome)
matrix_train_outcome_f <- clean_fii_dataset_f_train$ownership
matrix_train_outcome_f <- data.matrix(matrix_train_outcome_f)
matrix_train_outcome_m <- clean_fii_dataset_m_train$ownership
matrix_train_outcome_m <- data.matrix(matrix_train_outcome_m)
#prep test data
matrix_test <- select(clean_fii_dataset_test, -ownership)
matrix_test <- data.matrix(matrix_test)
matrix_test_f <- select(clean_fii_dataset_f_test, -ownership)
matrix_test_f <- data.matrix(matrix_test_f)
matrix_test_m <- select(clean_fii_dataset_m_test, -ownership)
matrix_test_m <- data.matrix(matrix_test_m)
#clean outcome var
matrix_test_outcome <- clean_fii_dataset_test$ownership
matrix_test_outcome <- data.matrix(matrix_test_outcome)
matrix_test_outcome_f <- clean_fii_dataset_f_test$ownership
matrix_test_outcome_f <- data.matrix(matrix_test_outcome_f)
matrix_test_outcome_m <- clean_fii_dataset_m_test$ownership
matrix_test_outcome_m <- data.matrix(matrix_test_outcome_m)
#hot coding
matrix_train_hot <- model.matrix(ownership~., clean_fii_dataset_train)[,-1]
matrix_test_hot <- model.matrix(ownership~., clean_fii_dataset_test)[,-1]
matrix_train_hot_f <- model.matrix(ownership~., clean_fii_dataset_f_train)[,-1]
matrix_test_hot_f <- model.matrix(ownership~., clean_fii_dataset_f_test)[,-1]
matrix_train_hot_m <- model.matrix(ownership~., clean_fii_dataset_m_train)[,-1]
matrix_test_hot_m <- model.matrix(ownership~., clean_fii_dataset_m_test)[,-1]
##have to put outcome var back onto datasets
matrix_train_hot <- as.data.frame(cbind(matrix_train_outcome,matrix_train_hot))
colnames(matrix_train_hot)[1] <- c("ownership")
matrix_test_hot <- as.data.frame(cbind(matrix_test_outcome,matrix_test_hot))
colnames(matrix_test_hot)[1] <- c("ownership")
matrix_train <- as.data.frame(cbind(matrix_train_outcome,matrix_train))
colnames(matrix_train)[1] <- c("ownership")
matrix_test <- as.data.frame(cbind(matrix_test_outcome,matrix_test))
colnames(matrix_test)[1] <- c("ownership")
matrix_train_hot_f <- as.data.frame(cbind(matrix_train_outcome_f,matrix_train_hot_f))
colnames(matrix_train_hot_f)[1] <- c("ownership")
matrix_test_hot_f <- as.data.frame(cbind(matrix_test_outcome_f,matrix_test_hot_f))
colnames(matrix_test_hot_f)[1] <- c("ownership")
matrix_train_f <- as.data.frame(cbind(matrix_train_outcome_f,matrix_train_f))
colnames(matrix_train_f)[1] <- c("ownership")
matrix_test_f <- as.data.frame(cbind(matrix_test_outcome_f,matrix_test_f))
colnames(matrix_test_f)[1] <- c("ownership")
matrix_train_hot_m <- as.data.frame(cbind(matrix_train_outcome_m,matrix_train_hot_m))
colnames(matrix_train_hot_m)[1] <- c("ownership")
matrix_test_hot_m <- as.data.frame(cbind(matrix_test_outcome_m,matrix_test_hot_m))
colnames(matrix_test_hot_m)[1] <- c("ownership")
matrix_train_m <- as.data.frame(cbind(matrix_train_outcome_m,matrix_train_m))
colnames(matrix_train_m)[1] <- c("ownership")
matrix_test_m <- as.data.frame(cbind(matrix_test_outcome_m,matrix_test_m))
colnames(matrix_test_m)[1] <- c("ownership")
#######################
####RUN THE MODELS####
#######################
rf_model_hot <- ranger(dependent.variable.name = "ownership", data = matrix_train_hot, importance = 'impurity', seed = 1423)
rf_model_hot <- ranger(dependent.variable.name = "ownership", data = matrix_train_hot, importance = 'impurity', seed = 1423, classification = TRUE)
rf_model_hot <- ranger(dependent.variable.name = "ownership", data = matrix_train_hot, importance = 'impurity', seed = 1423)
rf_model_hot2 <- ranger(dependent.variable.name = "ownership", data = matrix_train_hot, importance = 'impurity', seed = 1423, classification = TRUE)
View(rf_model_hot)
View(rf_model_hot2)
View(matrix_train)
View(matrix_train_f)
View(matrix_train_hot)
factor(ownershipo)
factor(ownership)
ownership$matrix_train_hot <- factor(ownership$matrix_train_hot)
View(matrix_train_hot)
View(matrix_train_hot)
attributes(ownership)
attributes(matrix_test_hot)
random_forest <- train("ownership" ~ .,
data = "matrix_train_hot",
method = "ranger")
random_forest <- train("ownership" ~ .,
data = matrix_train_hot,
method = "ranger")
random_forest <- train("ownership" ~ ., data = matrix_train_hot,method = "ranger")
random_forest <- train("ownership" ~ ., data = matrix_train_hot, method = "ranger")
?train
?train
train?
d
random_forest <- train("ownership" ~ ., data = clean_fii_data, method = "ranger")
View(clean_fii_dataset_f)
random_forest <- train("ownership" ~ ., data = clean_fii_dataset, method = "ranger")
random_forest <- train("ownership" ~ ., data = clean_fii_dataset_f, method = "ranger")
random_forest <- train(ownership ~ ., data = clean_fii_dataset_f, method = "ranger")
random_forest <- train(ownership ~ ., data = matrix_train_hot, method = "ranger")
random_forest <- train(ownership ~ ., data = clean_fii_dataset_f, method = "ranger")
rf_model_hot <- ranger(dependent.variable.name = ownership, data = matrix_train_hot, importance = 'impurity', seed = 1423)
rf_model_hot <- ranger(dependent.variable.name = "ownership", data = matrix_train_hot, importance = 'impurity', seed = 1423)
rf_model_hot <- ranger(dependent.variable.name = matrix_train_hot$ownership, data = matrix_train_hot, importance = 'impurity', seed = 1423)
